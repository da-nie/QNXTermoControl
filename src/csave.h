#ifndef C_SAVE_H
#define C_SAVE_H

//****************************************************************************************************
//Класс записи данных
//****************************************************************************************************

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <time.h>
#include <pthread.h>
#include <sys/neutrino.h>
#include <vector>
#include <unix.h>

using namespace std;

#include "ciodata.h"

//****************************************************************************************************
//настройки компиляции
//****************************************************************************************************
#pragma pack(1)

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//приоритет потока записи
#define SAVE_THREAD_PRIORITY 10

//максимальное значение счётчика для принудительного сохранения данных (1 такт - 10 мс)
#define SAVE_CACHE_COUNTER (100*60)

//****************************************************************************************************
//используемые структуры
//****************************************************************************************************

//****************************************************************************************************
//перечисления
//****************************************************************************************************


//****************************************************************************************************
//Класс записи данных
//****************************************************************************************************

class CSave
{
 protected:
  bool Enabled;//включена ли запись 
  unsigned long FirstTick;//первый номер такта
  bool FirstTickEnabled;//запомнен ли первый номер такта
  char MakeFileNameString[1024];//массив для сборки имени файла  
  pthread_mutex_t mutex_ID;//мьютекс для доступа к классу
  pthread_t pthread_ID;//идентификатор потока
  bool ExitThread;//выйти из потока
  vector<CIOData*> vector_CIODataPtr;//массив указателей на классы сохранения данных
  CIOData cIOData_Temp;//температура
 public:  
  //конструктор
  CSave();
  //деструктор
  ~CSave();
 public:
  bool GetExitState(void);//возвратить, требуется ли выход из потока
  bool Start(char *path);//начать запись с заданным именем каталога  
  bool Start(void);//начать запись
  bool Stop(void);//завершить запись
  bool SaveCache(void);//сохранить данные кэша
  bool SaveTemp(unsigned long tick,double temp);//сохранить температуру
  bool SaveProcessing(void);//произвести сохранение данных, если оно требуется (ВЫЗЫВАЕТСЯ ТОЛЬКО ПОТОКОМ ЗАПИСИ!) 
 protected:
  char* MakeFileName(char *patch,char *filename,char *device_name,long device_index);//создание имени файла из имени каталога, имени устройства и номера устройства
  void Save(CIOData *cIOData_Ptr,unsigned long t,long double value);//запись файлов
};

#endif