#ifndef CRECEIVE_THREAD
#define CRECEIVE_THREAD

//****************************************************************************************************
//Класс работы с потоком приёма данных от термодатчика
//****************************************************************************************************


//****************************************************************************************************
//макроопределения
//****************************************************************************************************

#define USB_DEVICE_VENDOR_ID	0x0c45
#define USB_DEVICE_PRODUCT_ID	0x7401

//размер буфера URB
#define URB_BUFFER_SIZE (8)

//максимальное количество точек для одного интерфейса
#define MAX_PIPE 16

//максимальное количество устройств
#define MAX_DEVICE 10

//приоритет потока приёма данных
#define RECEIVE_THREAD_PRIORITY 35

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************

#include <pthread.h> //для операций с потоками и мьютексами
#include <unistd.h> //для delay
#include <unix.h> //для sigblock
#include <sys/stat.h> //для mkdir
#include <sys/usbdi.h> //для USBD

#include "cthermocontrol.h"

//****************************************************************************************************
//перечисления
//****************************************************************************************************

//****************************************************************************************************
//структуры
//****************************************************************************************************

//структура подключённых устройств
struct SDevice
{
 usbd_device *device;
 usbd_device_instance_t *instance;
 unsigned char InterfaceAddr;//адрес интерфейса
 struct SPipe
 {
  unsigned char Addr;//адрес точки
  usbd_pipe *pipe;//канал для данной точки
  usbd_urb *urb;//выделенный URB
 };
 SPipe sPipe_Array[MAX_PIPE];//список конечных точек
 long PipeAmount;//количество конечных точек
};

//структура защищённых переменных
struct SProtectedVariables
{
 pthread_mutex_t mutex_ID;//мьютекс для доступа к структуре
 SDevice sDevice_Array[MAX_DEVICE];//подключённые устройства
 long ConnectedDeviceAmount;//количество подключённых устройств
 long CurrentConnectedDeviceAmount;//количество устройств в настоящий момент времени
 CThermoControl cThermoControl;//класс управления термодатчиком
};

//****************************************************************************************************
//глобальные переменные
//****************************************************************************************************

//****************************************************************************************************
//прототипы функций
//****************************************************************************************************

void InsertionDevice(usbd_connection *connect,usbd_device_instance_t *instance);//устройство подключено
void RemovalDevice(usbd_connection *connect,usbd_device_instance_t *instance);//устройство отключено
void DataReceive_81(usbd_urb *urb,usbd_pipe *pipe,void *data);//принимаются данные с конечной точки 0x81
void DataReceive_82(usbd_urb *urb,usbd_pipe *pipe,void *data);//принимаются данные с конечной точки 0x82
void PrintUSBDStatus(long status);//вывод сообщения об ошибке USBD

//****************************************************************************************************
//Класс работы с потоком приёма данных
//****************************************************************************************************

class CReceiveThread
{
 friend void *ReceiveThread(void *data);//поток приёма данных
 protected:
  pthread_t pthread_ID;//идентификатор потока
  pthread_mutex_t mutex_ID;//мьютекс для доступа
  bool ExitThread;//выйти из потока
 public:
  CReceiveThread();//конструктор
  ~CReceiveThread();//деструктор
  bool StartThread(void);//запустить поток приёма данных
  bool StopThread(void);//остановить поток приёма данных
  bool GetExitState(void);//true-требуется выход из потока
  bool GetCurrentTemp(float &temp);//получить текущую температуру
 protected:
  void Processing(void);//основной цикл обработки (вызывается только из потока)
};

#endif

